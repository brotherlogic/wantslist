// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: wantslist.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WantServiceClient is the client API for WantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WantServiceClient interface {
	DeleteWantListItem(ctx context.Context, in *DeleteWantListItemRequest, opts ...grpc.CallOption) (*DeleteWantListItemResponse, error)
	AddWantListItem(ctx context.Context, in *AddWantListItemRequest, opts ...grpc.CallOption) (*AddWantListItemResponse, error)
	AddWantList(ctx context.Context, in *AddWantListRequest, opts ...grpc.CallOption) (*AddWantListResponse, error)
	GetWantList(ctx context.Context, in *GetWantListRequest, opts ...grpc.CallOption) (*GetWantListResponse, error)
	DeleteWantList(ctx context.Context, in *DeleteWantlistRequest, opts ...grpc.CallOption) (*DeleteWantlistResponse, error)
	AmendWantListItem(ctx context.Context, in *AmendWantListItemRequest, opts ...grpc.CallOption) (*AmendWantListItemResponse, error)
	ForceUpdate(ctx context.Context, in *ForceUpdateRequest, opts ...grpc.CallOption) (*ForceUpdateResponse, error)
}

type wantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWantServiceClient(cc grpc.ClientConnInterface) WantServiceClient {
	return &wantServiceClient{cc}
}

func (c *wantServiceClient) DeleteWantListItem(ctx context.Context, in *DeleteWantListItemRequest, opts ...grpc.CallOption) (*DeleteWantListItemResponse, error) {
	out := new(DeleteWantListItemResponse)
	err := c.cc.Invoke(ctx, "/wantslist.WantService/DeleteWantListItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) AddWantListItem(ctx context.Context, in *AddWantListItemRequest, opts ...grpc.CallOption) (*AddWantListItemResponse, error) {
	out := new(AddWantListItemResponse)
	err := c.cc.Invoke(ctx, "/wantslist.WantService/AddWantListItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) AddWantList(ctx context.Context, in *AddWantListRequest, opts ...grpc.CallOption) (*AddWantListResponse, error) {
	out := new(AddWantListResponse)
	err := c.cc.Invoke(ctx, "/wantslist.WantService/AddWantList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) GetWantList(ctx context.Context, in *GetWantListRequest, opts ...grpc.CallOption) (*GetWantListResponse, error) {
	out := new(GetWantListResponse)
	err := c.cc.Invoke(ctx, "/wantslist.WantService/GetWantList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) DeleteWantList(ctx context.Context, in *DeleteWantlistRequest, opts ...grpc.CallOption) (*DeleteWantlistResponse, error) {
	out := new(DeleteWantlistResponse)
	err := c.cc.Invoke(ctx, "/wantslist.WantService/DeleteWantList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) AmendWantListItem(ctx context.Context, in *AmendWantListItemRequest, opts ...grpc.CallOption) (*AmendWantListItemResponse, error) {
	out := new(AmendWantListItemResponse)
	err := c.cc.Invoke(ctx, "/wantslist.WantService/AmendWantListItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) ForceUpdate(ctx context.Context, in *ForceUpdateRequest, opts ...grpc.CallOption) (*ForceUpdateResponse, error) {
	out := new(ForceUpdateResponse)
	err := c.cc.Invoke(ctx, "/wantslist.WantService/ForceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WantServiceServer is the server API for WantService service.
// All implementations should embed UnimplementedWantServiceServer
// for forward compatibility
type WantServiceServer interface {
	DeleteWantListItem(context.Context, *DeleteWantListItemRequest) (*DeleteWantListItemResponse, error)
	AddWantListItem(context.Context, *AddWantListItemRequest) (*AddWantListItemResponse, error)
	AddWantList(context.Context, *AddWantListRequest) (*AddWantListResponse, error)
	GetWantList(context.Context, *GetWantListRequest) (*GetWantListResponse, error)
	DeleteWantList(context.Context, *DeleteWantlistRequest) (*DeleteWantlistResponse, error)
	AmendWantListItem(context.Context, *AmendWantListItemRequest) (*AmendWantListItemResponse, error)
	ForceUpdate(context.Context, *ForceUpdateRequest) (*ForceUpdateResponse, error)
}

// UnimplementedWantServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWantServiceServer struct {
}

func (UnimplementedWantServiceServer) DeleteWantListItem(context.Context, *DeleteWantListItemRequest) (*DeleteWantListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWantListItem not implemented")
}
func (UnimplementedWantServiceServer) AddWantListItem(context.Context, *AddWantListItemRequest) (*AddWantListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWantListItem not implemented")
}
func (UnimplementedWantServiceServer) AddWantList(context.Context, *AddWantListRequest) (*AddWantListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWantList not implemented")
}
func (UnimplementedWantServiceServer) GetWantList(context.Context, *GetWantListRequest) (*GetWantListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWantList not implemented")
}
func (UnimplementedWantServiceServer) DeleteWantList(context.Context, *DeleteWantlistRequest) (*DeleteWantlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWantList not implemented")
}
func (UnimplementedWantServiceServer) AmendWantListItem(context.Context, *AmendWantListItemRequest) (*AmendWantListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmendWantListItem not implemented")
}
func (UnimplementedWantServiceServer) ForceUpdate(context.Context, *ForceUpdateRequest) (*ForceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceUpdate not implemented")
}

// UnsafeWantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WantServiceServer will
// result in compilation errors.
type UnsafeWantServiceServer interface {
	mustEmbedUnimplementedWantServiceServer()
}

func RegisterWantServiceServer(s grpc.ServiceRegistrar, srv WantServiceServer) {
	s.RegisterService(&WantService_ServiceDesc, srv)
}

func _WantService_DeleteWantListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWantListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).DeleteWantListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wantslist.WantService/DeleteWantListItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).DeleteWantListItem(ctx, req.(*DeleteWantListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_AddWantListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWantListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).AddWantListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wantslist.WantService/AddWantListItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).AddWantListItem(ctx, req.(*AddWantListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_AddWantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWantListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).AddWantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wantslist.WantService/AddWantList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).AddWantList(ctx, req.(*AddWantListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_GetWantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWantListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).GetWantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wantslist.WantService/GetWantList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).GetWantList(ctx, req.(*GetWantListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_DeleteWantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWantlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).DeleteWantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wantslist.WantService/DeleteWantList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).DeleteWantList(ctx, req.(*DeleteWantlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_AmendWantListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmendWantListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).AmendWantListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wantslist.WantService/AmendWantListItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).AmendWantListItem(ctx, req.(*AmendWantListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_ForceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).ForceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wantslist.WantService/ForceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).ForceUpdate(ctx, req.(*ForceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WantService_ServiceDesc is the grpc.ServiceDesc for WantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wantslist.WantService",
	HandlerType: (*WantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteWantListItem",
			Handler:    _WantService_DeleteWantListItem_Handler,
		},
		{
			MethodName: "AddWantListItem",
			Handler:    _WantService_AddWantListItem_Handler,
		},
		{
			MethodName: "AddWantList",
			Handler:    _WantService_AddWantList_Handler,
		},
		{
			MethodName: "GetWantList",
			Handler:    _WantService_GetWantList_Handler,
		},
		{
			MethodName: "DeleteWantList",
			Handler:    _WantService_DeleteWantList_Handler,
		},
		{
			MethodName: "AmendWantListItem",
			Handler:    _WantService_AmendWantListItem_Handler,
		},
		{
			MethodName: "ForceUpdate",
			Handler:    _WantService_ForceUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wantslist.proto",
}
